//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.TaskPlanner
{
    [Serializable]
    public class PlanPickPlaceGoal : Message
    {
        public const string k_RosMessageName = "task_planner/PlanPickPlace";
        public override string RosMessageName => k_RosMessageName;

        //  By default, the task type is PICK_ONLY
        public const int PICK_AND_PLACE_SIM = 0;
        public const int PICK_AND_PLACE_EXECUTE = 1; 
        public const int PICK_ONLY = 2;
        public const int PLACE_ONLY = 3; 
        public int task_type;
        //  Planning group properties
        public string arm_group_name;
        public string hand_group_name;
        //  Robot model and links
        public string eef_name;
        //  The name of the end effector as in the srdf
        public string hand_frame;
        //  Will be used as the endEffectorFrame
        //  Object and surfaces
        //  During the pick and place operation, the object is allowed to collide with the support_surfaces
        public string object_id;
        //  ID of the CollisionObject to pick/place
        public string[] support_surfaces;
        //  Picking
        //  grasp_provider_plugin_name defaults to "moveit_task_constructor/GraspProviderDefault" if only one Grasp is provided in grasps without setting its grasp_pose field
        //  If the grasp_pose field is set, or there are multiple Grasps provided in grasps, grasp_provider_plugin_name defaults to "moveit_task_constructor/GraspProviderFixedPoses"
        public string grasp_provider_plugin_name;
        //  Name of the Grasp Provider plugin to load 
        public Moveit.GraspMsg[] grasps;
        //  List of Grasps (The approach and retreat movements and hand poses are all used and required for each Grasp)
        public Geometry.PoseMsg grasp_frame_transform;
        //  Additional transformation to apply to the endEffectorFrame when computing the IK
        //  Placing
        //  place_provider_plugin_name defaults to "moveit_task_constructor/PlaceProviderDefault" if only one PlaceLocation is provided in place_locations
        //  Otherwise place_provider_plugin_name defaults to "moveit_task_constructor/PlaceProviderFixedPoses"
        public string place_provider_plugin_name;
        //  Name of the Place Provider plugin to load
        public Moveit.PlaceLocationMsg[] place_locations;
        //  List of PlaceLocations (The approach and retreat movements and hand poses are all used and required for each PlaceLocation)

        public PlanPickPlaceGoal()
        {
            this.task_type = 0;
            this.arm_group_name = "";
            this.hand_group_name = "";
            this.eef_name = "";
            this.hand_frame = "";
            this.object_id = "";
            this.support_surfaces = new string[0];
            this.grasp_provider_plugin_name = "";
            this.grasps = new Moveit.GraspMsg[0];
            this.grasp_frame_transform = new Geometry.PoseMsg();
            this.place_provider_plugin_name = "";
            this.place_locations = new Moveit.PlaceLocationMsg[0];
        }

        public PlanPickPlaceGoal(int task_type, string arm_group_name, string hand_group_name, string eef_name, string hand_frame, string object_id, string[] support_surfaces, string grasp_provider_plugin_name, Moveit.GraspMsg[] grasps, Geometry.PoseMsg grasp_frame_transform, string place_provider_plugin_name, Moveit.PlaceLocationMsg[] place_locations)
        {
            this.task_type = task_type;
            this.arm_group_name = arm_group_name;
            this.hand_group_name = hand_group_name;
            this.eef_name = eef_name;
            this.hand_frame = hand_frame;
            this.object_id = object_id;
            this.support_surfaces = support_surfaces;
            this.grasp_provider_plugin_name = grasp_provider_plugin_name;
            this.grasps = grasps;
            this.grasp_frame_transform = grasp_frame_transform;
            this.place_provider_plugin_name = place_provider_plugin_name;
            this.place_locations = place_locations;
        }

        public static PlanPickPlaceGoal Deserialize(MessageDeserializer deserializer) => new PlanPickPlaceGoal(deserializer);

        private PlanPickPlaceGoal(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.task_type);
            deserializer.Read(out this.arm_group_name);
            deserializer.Read(out this.hand_group_name);
            deserializer.Read(out this.eef_name);
            deserializer.Read(out this.hand_frame);
            deserializer.Read(out this.object_id);
            deserializer.Read(out this.support_surfaces, deserializer.ReadLength());
            deserializer.Read(out this.grasp_provider_plugin_name);
            deserializer.Read(out this.grasps, Moveit.GraspMsg.Deserialize, deserializer.ReadLength());
            this.grasp_frame_transform = Geometry.PoseMsg.Deserialize(deserializer);
            deserializer.Read(out this.place_provider_plugin_name);
            deserializer.Read(out this.place_locations, Moveit.PlaceLocationMsg.Deserialize, deserializer.ReadLength());
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.task_type);
            serializer.Write(this.arm_group_name);
            serializer.Write(this.hand_group_name);
            serializer.Write(this.eef_name);
            serializer.Write(this.hand_frame);
            serializer.Write(this.object_id);
            serializer.WriteLength(this.support_surfaces);
            serializer.Write(this.support_surfaces);
            serializer.Write(this.grasp_provider_plugin_name);
            serializer.WriteLength(this.grasps);
            serializer.Write(this.grasps);
            serializer.Write(this.grasp_frame_transform);
            serializer.Write(this.place_provider_plugin_name);
            serializer.WriteLength(this.place_locations);
            serializer.Write(this.place_locations);
        }

        public override string ToString()
        {
            return "PlanPickPlaceGoal: " +
            "\ntask_type: " + task_type.ToString() +
            "\narm_group_name: " + arm_group_name.ToString() +
            "\nhand_group_name: " + hand_group_name.ToString() +
            "\neef_name: " + eef_name.ToString() +
            "\nhand_frame: " + hand_frame.ToString() +
            "\nobject_id: " + object_id.ToString() +
            "\nsupport_surfaces: " + System.String.Join(", ", support_surfaces.ToList()) +
            "\ngrasp_provider_plugin_name: " + grasp_provider_plugin_name.ToString() +
            "\ngrasps: " + System.String.Join(", ", grasps.ToList()) +
            "\ngrasp_frame_transform: " + grasp_frame_transform.ToString() +
            "\nplace_provider_plugin_name: " + place_provider_plugin_name.ToString() +
            "\nplace_locations: " + System.String.Join(", ", place_locations.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize, MessageSubtopic.Goal);
        }
    }
}
