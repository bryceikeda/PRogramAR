//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.MoveitTaskConstructor
{
    [Serializable]
    public class SolutionMsg : Message
    {
        public const string k_RosMessageName = "moveit_task_constructor_msgs/Solution";
        public override string RosMessageName => k_RosMessageName;

        //  id of generating task
        public string task_id;
        //  planning scene of start state
        public Moveit.PlanningSceneMsg start_scene;
        //  set of all sub solutions involved
        public SubSolutionMsg[] sub_solution;
        //  (ordered) sequence of actual trajectories
        public SubTrajectoryMsg[] sub_trajectory;

        public SolutionMsg()
        {
            this.task_id = "";
            this.start_scene = new Moveit.PlanningSceneMsg();
            this.sub_solution = new SubSolutionMsg[0];
            this.sub_trajectory = new SubTrajectoryMsg[0];
        }

        public SolutionMsg(string task_id, Moveit.PlanningSceneMsg start_scene, SubSolutionMsg[] sub_solution, SubTrajectoryMsg[] sub_trajectory)
        {
            this.task_id = task_id;
            this.start_scene = start_scene;
            this.sub_solution = sub_solution;
            this.sub_trajectory = sub_trajectory;
        }

        public static SolutionMsg Deserialize(MessageDeserializer deserializer) => new SolutionMsg(deserializer);

        private SolutionMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.task_id);
            this.start_scene = Moveit.PlanningSceneMsg.Deserialize(deserializer);
            deserializer.Read(out this.sub_solution, SubSolutionMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.sub_trajectory, SubTrajectoryMsg.Deserialize, deserializer.ReadLength());
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.task_id);
            serializer.Write(this.start_scene);
            serializer.WriteLength(this.sub_solution);
            serializer.Write(this.sub_solution);
            serializer.WriteLength(this.sub_trajectory);
            serializer.Write(this.sub_trajectory);
        }

        public override string ToString()
        {
            return "SolutionMsg: " +
            "\ntask_id: " + task_id.ToString() +
            "\nstart_scene: " + start_scene.ToString() +
            "\nsub_solution: " + System.String.Join(", ", sub_solution.ToList()) +
            "\nsub_trajectory: " + System.String.Join(", ", sub_trajectory.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
